// You may have noticed that the Play again? handling starts a new game when 
// the user enters that begins with y or Y, but ends the program if the user 
// enters anything else. Even just pressing the {Enter} key is enough to end
// the program. Modify the program so that it only accepts y, Y, n, or N as
// valid inputs, and issues an error message for anything else.

// Consider what happens when the user enters something that begins with n
// or y but isn't ambiguously a yes/no response. For instance, yellow or 
// narwhale. What should the program in those cases?


const readline = require('readline-sync');

const INITIAL_MARKER = ' ';
const HUMAN_MARKER = 'X';
const COMPUTER_MARKER = 'O';
const WINS_MATCH = 2;
const WINNING_LINES = [
  [1, 2, 3], [4, 5, 6], [7, 8, 9],
  [1, 4, 7], [2, 5, 8], [3, 6, 9],
  [1, 5, 9], [3, 5, 7]
];
const FIRST_MOVE = "choose";   // Options are "player", "computer", or "choose"


function prompt(message) {
  console.log(`${message}`);
}

function displayBoard(board) {
  console.clear();

  console.log(`You are ${HUMAN_MARKER}. Computer is ${COMPUTER_MARKER}`);

  console.log('');
  console.log('     |     |');
  console.log(`  ${board['1']}  |  ${board['2']}  |  ${board['3']}`);
  console.log('     |     |');
  console.log('-----+-----+-----');
  console.log('     |     |');
  console.log(`  ${board['4']}  |  ${board['5']}  |  ${board['6']}`);
  console.log('     |     |');
  console.log('-----+-----+-----');
  console.log('     |     |');
  console.log(`  ${board['7']}  |  ${board['8']}  |  ${board['9']}`);
  console.log('     |     |');
  console.log('');
}

function joinOr(arr, delimiter=', ', word='or') {
  if (arr.length === 2) {
    return arr.join(` ${word} `);
  } else if (arr.length > 2) {
    let front = arr.slice(0, arr.length-1).join(delimiter);
    return front + delimiter + word + ' ' + arr[arr.length-1];
  }
  return arr.join();
}

function initializeBoard() {
  let board = {};

  for (let square = 1; square <= 9; square++) {
    board[String(square)] = INITIAL_MARKER;
  }

  return board;
}

function emptySquares(board) {
  return Object.keys(board).filter(key => board[key] === INITIAL_MARKER);
}

function playerChoosesSquare(board) {
  let square;

  while (true) {
    prompt(`Choose a square ${joinOr(emptySquares(board))}:`);
    square = readline.question().trim();
  
    if (emptySquares(board).includes(square)) break;
  
    prompt("Sorry, that's not a valid choice.");
  }

  board[square] = HUMAN_MARKER;
}

function computerChoosesSquare(board) {
  let randomIndex = Math.floor(Math.random() * emptySquares(board).length);

  let square = emptySquares(board)[randomIndex];

  if (typeof detectOpportunity(board) === 'number') {
    board[detectOpportunity(board)] = COMPUTER_MARKER;
  } else if (typeof detectThreat(board) === 'number') {
    board[detectThreat(board)] = COMPUTER_MARKER;
  } else if (board[5] === INITIAL_MARKER) { 
    board[5] = COMPUTER_MARKER;
  } else {
    board[square] = COMPUTER_MARKER;
  }
}

function boardFull(board) {
  return emptySquares(board).length === 0;
}

function someoneWon(board) {
  return !!detectWinner(board);
}

function detectWinner(board) {

  for (let line = 0; line < WINNING_LINES.length; line++) {
    let [ sq1, sq2, sq3 ] = WINNING_LINES[line];

    if (
      board[sq1] === HUMAN_MARKER &&
      board[sq2] === HUMAN_MARKER &&
      board[sq3] === HUMAN_MARKER
    ) {
      return 'Player';
    } else if (
      board[sq1] === COMPUTER_MARKER &&
      board[sq2] === COMPUTER_MARKER &&
      board[sq3] === COMPUTER_MARKER
    ) {
      return 'Computer';
    }
  }

  return null;
}

function detectThreat(board) {
  for (let line = 0; line < WINNING_LINES.length; line++) {
    let [ sq1, sq2, sq3 ] = WINNING_LINES[line];

    if (
      board[sq1] === INITIAL_MARKER &&
      board[sq2] === HUMAN_MARKER &&
      board[sq3] === HUMAN_MARKER
    ) {
      return sq1;
    } else if (
      board[sq1] === HUMAN_MARKER &&
      board[sq2] === INITIAL_MARKER &&
      board[sq3] === HUMAN_MARKER
    ) {
      return sq2;
    } else if (
      board[sq1] === HUMAN_MARKER &&
      board[sq2] === HUMAN_MARKER &&
      board[sq3] === INITIAL_MARKER
    ) {
      return sq3;
    }
  }

  return null;
}

function detectOpportunity(board) {
  for (let line = 0; line < WINNING_LINES.length; line++) {
    let [ sq1, sq2, sq3 ] = WINNING_LINES[line];

    if (
      board[sq1] === INITIAL_MARKER &&
      board[sq2] === COMPUTER_MARKER &&
      board[sq3] === COMPUTER_MARKER
    ) {
      return sq1;
    } else if (
      board[sq1] === COMPUTER_MARKER &&
      board[sq2] === INITIAL_MARKER &&
      board[sq3] === COMPUTER_MARKER
    ) {
      return sq2;
    } else if (
      board[sq1] === COMPUTER_MARKER &&
      board[sq2] === COMPUTER_MARKER &&
      board[sq3] === INITIAL_MARKER
    ) {
      return sq3;
    }
  }

  return null;
}

function playAgain() {
  while (true) {
    prompt('Play again? (y or n)');
    let answer = readline.question().trim().toLowerCase();

    if (answer === 'y') {
      return true;
    } else if (answer === 'n') {
      return false;
    } else {
      prompt("Invalid input. Please enter 'y' or 'n'.");
    }
  }
}

function chooseStartingPlayer() {
  if (FIRST_MOVE === "player") return "Player";
  if (FIRST_MOVE === "computer") return "Computer";
  if (FIRST_MOVE === "choose") {
    prompt("Who goes first? (p for player, c for computer): ");
    let choice = readline.question().toLowerCase()[0];
    return (choice === 'p') ? "Player" : "Computer";
  }
}

function alternatePlayer(currentPlayer) {
  return (currentPlayer === "Player") ? "Computer" : "Player";
}

function playGame() {
  let playerWins = 0;
  let computerWins = 0;

  while (true) {
    let board = initializeBoard();
    let currentPlayer = chooseStartingPlayer();

    while (true) {
      displayBoard(board);

      if (currentPlayer === "Player") {
        playerChoosesSquare(board);
      } else {
        computerChoosesSquare(board);
      }

      if (someoneWon(board) || boardFull(board)) break;
      currentPlayer = alternatePlayer(currentPlayer);
    }

    displayBoard(board);
    
    if (someoneWon(board)) {
      let winner = detectWinner(board);
      prompt(`${winner} won!`);
      if (winner === 'Player') {
        playerWins += 1;
      } else {
        computerWins += 1;
      }
    } else {
      prompt("It's a tie!");
    }

    prompt(`Score - Player: ${playerWins}, Computer: ${computerWins}`);

    if (playerWins === WINS_MATCH) {
      prompt("Player wins the match!");
      playerWins = 0;
      if (!playAgain()) break;
    } else if (computerWins === WINS_MATCH) {
      prompt("Computer wins the match!");
      computerWins = 0;
      if (!playAgain()) break;
    } else {
      if (!playAgain()) break;
    }
  }
}

while (true) {
  playGame();
  prompt('Thanks for playing Tic Tac Toe!');
  break
}