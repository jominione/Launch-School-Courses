// Problem - Sort Strings by Most Adjacent Consonants

// Given an array of strings, return a new array where the strings are sorted
// to the highest number of adjacent consonants a particular string contains.
// If two strings contain the same highest number of adjacent consonants they
// should retain their original order in relation to each other. Consonants
// are considered adjacent if they are next to each other in the same word
// or if there is a space between two consonants in adjacent words.

// Note that for the problem, the letters 'y' and 'w' should be treated as
// consonants.

// input: array of strings
// output: new array of strings where the strings are sorted to the highest 
// number of adjacent consonants a particular string contains

// rules:
//      Explicit requirements:
//        - calculate the max number of adjacent consonants within each string
//        - output array contains as elements the strings of input array sorted
//          to the highest number of adjacent consonants a particular string contains.
//        - If two strings contain the same highest number of adjacent consonants
//          they should retain their original order in relation to each other.
//        - Consonants are considered adjacent if they are next to each other
//          in the same word or if there is a space between two consonants
//          in adjacent words.
//        - the letters 'y' and 'w' should be treated as consonants.

//      Implict requirements:
//        - String can contain multiple words separated by space.

// Questions:
// 1. Can strings be empty?
// 2. What is meant by 'space between two consonants in adjacent words'?
// 3. Are punctuation marks taken into account when judging whether
//    letters are adjacent consonants?
// 4. If there are multiple adjacent consonants grouped separately, are the
//    number of consonants summed together or only the biggest number of
//    grouped adjacent consonant treated as the 'highest number of adjacent
//    consonants a string contains'.
// 5. What is the order of the sort? Ascending or descending? [Answered by test cases]
// 6. Is case important?

// rules (ex-post test cases):
//      Explicit requirements:
//        - calculate the number of adjacent consonants within each string
//        - output array contains as elements the strings of input array sorted
//          by strings with the highest number of adjacent consonants to least i.e. descending order.
//        - If two strings contain the same highest number of adjacent consonants
//          they should retain their original order in relation to each other.
//        - Consonants are considered adjacent if they are next to each other
//          in the same word or if there is a space between two consonants
//          in adjacent words.
//        - the letters 'y' and 'w' should be treated as consonants.

//      Implict requirements:
//        - String can contain multiple words separated by space.
//        - Strings cannot be empty.
//        - Presence of a single consonant does not change the sort order, 
//          only adjacent consonants.

// Data Structures: 

// In order to sort the input array, need to associate each string with the
// count of adjacent consonants it has. This implies that we should use an
// object as the data structure to hold the association of string to adjacent
// consonant count.

// Algorithm:

// 1. Start with:
//    - An empty adjacentConsonantCount object.
//    - An empty 'result' array .
//    - a remaining strings equal to the input array.
// 2. For each string calculate the max count of adjacent consonants and add 
//    string to adjacentConsonantCount with the count.
// 3. For each string in remaining strings determine if it has the highest
//    count of adjacent consonants against the other strings in the array:
//    - if it is:
//      - add it to the result array
//      - remove it from the remaining strings array.
//    - determine if it has equal number of adjacent consonants as another 
//      string. if it does:
//        - determine who has the lower index.
//        - if the current string has lower index continue the loop;
//        - otherwise move onto next iteration.
//    - if it isn't:
//      - move on to next iteration.
// 4. Once the remaining strings array is empty return the result array.

// Test cases:

let list1 = ['aa', 'baa', 'ccaa', 'dddaa'];
console.log(sortStringsByConsonants(list1));
// ['dddaa', 'ccaa', 'aa', 'baa']

let list2 = ['can can', 'toucan', 'batman', 'salt pan'];
console.log(sortStringsByConsonants(list2));
// ['salt pan', 'can can', 'batman', 'toucan']

let list3 = ['bar', 'car', 'far', 'jar'];
console.log(sortStringsByConsonants(list3));
// ['bar', 'car', 'far', 'jar']

let list4 = ['day', 'week', 'month', 'year'];
console.log(sortStringsByConsonants(list4));
// ['month', 'day', 'week', 'year']

// Implementation:

function sortStringsByConsonants(strings) {
  let stringsCopy = strings.slice();

  let sortedStrings = stringsCopy.sort((a, b) => {
    return countMaxAdjacentConsonants(b) - countMaxAdjacentConsonants(a);
  });
  return sortedStrings;
}


// Sub-Algorithm - countMaxAdjacentConsonants

// Remove the spaces from the input string.
// Initialise a count to zero.
// Initialise a temporary string to an empty string
// Iterate through the input string:
// - if the letter is a consonant:
//   - concatenate it to the temporary string
// - if the letter is a vowel:
//   - if the temporary string has a length greater than 1
//     AND the temporary string length is greater than the current count:
//     - set the count to the length of the temporary string
//   - reset the temporary string to an empty string
// - Return the count

// Test Cases for Sub-Algorithm:

console.log(countMaxAdjacentConsonants('dddaa')); // 3
console.log(countMaxAdjacentConsonants('ccaa'));  // 2 
console.log(countMaxAdjacentConsonants('baa'));   // 0
console.log(countMaxAdjacentConsonants('aa'));    // 0

// Implementation:

function countMaxAdjacentConsonants(string) {
  const consonants = 'bcdfghjklmnpqrstvwxyz';
  let maxCount = 0;
  let currentCount = 0;

  for (let letter of string.split(' ').join('')) {
    if (consonants.includes(letter)) {
      currentCount++;

      if (currentCount > 1 && currentCount > maxCount) {
        maxCount = currentCount;
      }
    } else {
      currentCount = 0;
    }
  }

  return maxCount;
}


