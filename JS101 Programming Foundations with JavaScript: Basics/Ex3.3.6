// Suppose we build an array like this:

let flintstones = ["Fred", "Wilma"];
flintstones.push(["Barney", "Betty"]);
flintstones.push(["Bambam", "Pebbles"]);

// This code will create a nested array that looks like this:

// ["Fred", "Wilma", ["Barney", "Betty"], ["Bambam", "Pebbles"]];

// Nesting data structures like we do here is commonplace in JavaScript and 
// programming in general. We'll explore this in much greater depth in a future 
// Lesson.

// Create a new array that contains all of the above values, but in an 
// un-nested format:

// [ 'Fred', 'Wilma', 'Barney', 'Betty', 'Bambam', 'Pebbles' ]

// Hint 1: Read about the Array.prototype.concat() method on MDN, and pay 
// close attention to how concat uses its arguments.

// Hint 2: Consider using spread syntax in your solution. If you can't get 
// a solution with spread syntax, try using Array.prototype.reduce or 
// Array.prototype.forEach.

// Solution:

flintstones = [].concat(...flintstones);
console.log(flintstones);

// Solution with reduce:

flintstones = flintstones.reduce((accum, element) => {
  return accum.concat(element);
}, []);

// Solution with forEach:

let newFlintstones = [];
flintstones.forEach(element => {
  newFlintstones = newFlintstones.concat(element);
});

// Solution with flat:

let newFlintstones = flintstones.flat();
console.log(newFlintstones)