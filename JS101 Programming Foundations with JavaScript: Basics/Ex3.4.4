// What will the following code output?

let arr1 = [{ first: "value1" }, { second: "value2" }, 3, 4, 5];
let arr2 = arr1.slice();
arr2[0].first = 42;
console.log(arr1);

// Solution [Wrong]: Will output [{ first: "value1" }, { second: "value2" }, 3, 4, 5].
// When arr2 is initiated by assigning slice of arr1. Slice returns a new
// array. So when arr2 is mutated this has no effect on arr1 because they
// point to different objects in memory.

// There are two kinds of copy operations when working with objects and arrays:
// a deep copy and a shallow copy.

// A deep copy makes a duplicate of every item in an existing array or object.
// In particular, it creates completely new instances of any subarrays or 
// subojects in the source object. If we performed a deep copy on arr1, we
// would have two different arrays as well as four seperate objects.

// A shallow copy only makes a duplicate of the outermost values in an array
// or object. If we perform a shallow copy on arr1, we end up with two
// different arrays, but we still only ahve one occurrence each of 
// { first: 42 } and { second: 'value2' }. In this case, both arr1[0] and 
// arr2[0] point to the same object in memory. Lifewise, arr1[1] and arr2[1] 
// point to the { second: 'value2' } object.

// The slice method performs shallow copies.