/*
We want our code to take an object-oriented approach to keeping track of the
products, and although the functions we just wrote work fine, since they are
manipulating data in the objects, we should place them in the objects
themselves. Rewrite the code such that the functions `describeProduct` and
`setProductPrice` become methods `describe` and `setPrice` on both our 
`scissors` and `drill` objects.

// Solution:

let scissors = {
  id: 0,
  name: 'Scissors',
  stock: 8,
  price: 10,
  setPrice(newPrice) {
    if (newPrice >= 0) {
      this.price = newPrice;
    } else {
      console.log('Invalid price!');
    }
  },
  describe() {
    console.log(`Name: ${this.name}`);
    console.log(`ID: ${this.id}`);
    console.log(`Price: $${this.price}`);
    console.log(`Stock: ${this.stock}`);
  },
};

let drill = {
  id: 1,
  name: 'Cordless Drill',
  stock: 15,
  price: 45,
  setPrice(newPrice) {
    if (newPrice >= 0) {
      this.price = newPrice;
    } else {
      console.log('Invalid price!');
    }
  },
  describe() {
    console.log(`Name: ${this.name}`);
    console.log(`ID: ${this.id}`);
    console.log(`Price: $${this.price}`);
    console.log(`Stock: ${this.stock}`);
  },
};