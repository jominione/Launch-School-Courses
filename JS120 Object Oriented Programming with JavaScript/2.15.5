// Use `let self = this`; to ensure that `TESgames.listGames` uses `TESGames`
// as its context and logs the proper output.

// Solution:

const TESgames = {
  titles: ['Arena', 'Daggerfall', 'Morrowin', 'Oblivion', 'Skyrim'],
  seriesTitle: 'The Elder Scrolls',
  listGames: function() {
    let self = this;
    this.titles.forEach(function(title) {
      console.log(self.seriesTitle + ': ' + title);
    });
  }
};

TESgames.listGames();

// By using `let self = this;` in the outer scope, you are assigning `this` 
// to local variable `self`, you are assigning the context in the outer scope
// to `self`.

// JavaScript uses lexical scoping rules for variables, so in the function 
// body of the callback function to the `forEach` method, `self` refers to 
// context defined in the outer scope which is `TESgames`.

// Hence, the callback function can access `self` within its body and use it
// to access the context in the outer scope for its context object.

// This will output the expected output.