// What will the following code output?

let obj = {
  a: 2,
  b: 3,
};

function foo() {
  return this.a + this.b;
}

let bar = foo.bind(obj);

console.log(foo());
console.log(bar());

// Solution: Will output `NaN` and `5`.

// On line 14 when `console.log` is invoked with argument passed invocation
// of function `foo`. 

// When you invoke a function with parentheses, JavaScript uses the global
// object as the implicit context. Hence on line 9, `this` refers to the global
// object but in the global object neither property `a` or `b` are defined,
// so `this.a` and `this.b` has the value `undefined`.

// `undefined + undefined` evalutes to `NaN`, hence calling `foo` returns `NaN`.

// On line 12 global variable `bar` is declared and defined with the value
// of calling `foo` on `bind` method with context argument `obj`.

// 