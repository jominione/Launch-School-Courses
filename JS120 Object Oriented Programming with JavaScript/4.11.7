// This problem is part 2 of the probem in the previous question.

// Examine the following code (it's a little different from that in the 
// previous problem):

function Person(name) {
  this.name = name;
  this.school = undefined;
}

Person.prototype.speak = function() {
  return `Hello, my name is ${this.name}.`;
};

// your code from the previous question.

// more missing code

Child.prototype.learn = function() {
  return "I'm going to school!";
};

let child = new Child("Suzy", "PS 33");
console.log(child instanceof Child);                              // true
console.log(child instanceof Person);                             // true
console.log(Object.getPrototypeOf(child) === Child.prototype);    // true
console.log(Object.getPrototypeOf(child).constructor === Child);  // true
console.log(child.school === "PS 33");                            // true
console.log(child.learn() === "I'm going to school!");            // true
console.log(child.speak() === "Hello, may name is Suzy.");        // true
console.log();

let person = new Person("Pete");
console.log(person instanceof Child === false);                   // true
console.log(person instanceof Person);                            // true
console.log(Object.getPrototypeOf(person) === Person.prototype);  // true
console.log(Object.getPrototypeOf(person).constructor === Person);// true
console.log(person.school === undefined);                         // true
console.log(person.speak() == "Hello, my name is Pete.");         // true
console.log(person.learn === undefined);

// Determine what code you must write to replace the "more missing code"
// comment to make the program produce the results shown. Select all code
// snippets that will work.

// A:

Child.prototype = Object.assign(Person.prototype);
Child.prototype.constructor = Child;

// B:

Child.prototype = Object.create(Person.prototype);
Child.prototype["constructor"] = Child;

// C:

Child.prototype = Object.create(Person);
Child.prototype.constructor = Child;

// D:

Child.prototype = Object.create(Person.prototype);